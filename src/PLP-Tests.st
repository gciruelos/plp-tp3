TestCase subclass: #Test01Cards	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tests'!!Test01Cards methodsFor: 'testing'!test01_3MeetingGoals	| tmp1 tmp2 tmp3 tmp4 |	tmp1 := TreasureCard new: #tea.	tmp2 := TreasureCard new: #cookies.	tmp3 := TreasureCard new: #milk.	tmp4 := GoalCard new: (Set with: tmp1 with: tmp3).	self		assert: (tmp4 isMetBy: (Set with: tmp1 with: tmp3));		assert: (tmp4 isMetBy: (Set with: tmp1 with: tmp2 with: tmp3));		assert: (tmp4 isMetBy: (Set with: tmp1 with: tmp2)) not! !!Test01Cards methodsFor: 'testing'!test01_2GoalCardsEquality	| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 |	tmp1 := TreasureCard new: #tea.	tmp2 := TreasureCard new: #cookies.	tmp3 := TreasureCard new: #milk.	tmp4 := Set with: tmp1 with: tmp2.	tmp5 := Set with: tmp2 with: tmp3.	tmp6 := Set with: tmp3 with: tmp2.	tmp7 := Set with: tmp3 with: tmp1.	self		assert: (GoalCard new: tmp4) equals: (GoalCard new: tmp4);		assert: (GoalCard new: tmp5) equals: (GoalCard new: tmp6);		assert: (GoalCard new: tmp5) ~= (GoalCard new: tmp7);		assert: (TreasureCard new: tmp4) ~= tmp4;		assert: ((Set with: (GoalCard new: tmp4)) includes: (GoalCard new: tmp4));		assert: ((Set with: (GoalCard new: tmp5)) includes: (GoalCard new: tmp4)) not! !!Test01Cards methodsFor: 'testing'!test01_4CardsAreReadable	| tmp1 tmp2 tmp3 tmp4 |	tmp1 := TreasureCard new: #tea.	tmp2 := TreasureCard new: #cookies.	tmp3 := TreasureCard new: #milk.	tmp4 := GoalCard new: (Set with: tmp1 with: tmp3).	self		assert: ('*tea*' match: tmp1 printString);		assert: ('*cookies*' match: tmp2 printString);		assert: ('*tea*' match: tmp4 printString);		assert: ('*milk*' match: tmp4 printString)! !!Test01Cards methodsFor: 'testing'!test01_1TreasureCardsEquality	self		assert: (TreasureCard new: #tea) equals: (TreasureCard new: #tea);		assert: (TreasureCard new: #tea) ~= (TreasureCard new: #cookies);		assert: (TreasureCard new: #tea) ~= #tea;		assert:			((Set with: (TreasureCard new: #tea))				includes: (TreasureCard new: #tea));		assert:			((Set with: (TreasureCard new: #cookies))				includes: (TreasureCard new: #tea)) not! !TestCase subclass: #Test02Players	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tests'!!Test02Players methodsFor: 'testing'!test02_1PlayerCreation	| tmp1 |	tmp1 := MiniFluxxPlayer new: #Ana.	self		assert: tmp1 name equals: #Ana;		assert: tmp1 handSize equals: 0;		assert: tmp1 hasCards not;		assert: tmp1 table isEmpty! !!Test02Players methodsFor: 'testing'!test02_2HandAndDeck	| tmp1 tmp2 tmp3 |	tmp1 := MiniFluxxPlayer new: #Ana.	tmp2 := GoalCard		new:			(Set				with: (TreasureCard new: #chocolate)				with: (TreasureCard new: #cookies)).	tmp3 := OrderedCollection		with: (TreasureCard new: #chocolate)		with: (TreasureCard new: #cookies)		with: (TreasureCard new: #tea).	self assert: (tmp2 isMetBy: tmp3).	tmp1 pickFrom: tmp3.	self		assert: (tmp2 isMetBy: tmp3) not;		assert: tmp1 handSize equals: 1.	tmp1 pickFrom: tmp3.	self		assert: tmp1 handSize equals: 2;		assert: tmp1 hasCards;		assert: tmp3 first equals: (TreasureCard new: #tea)! !!Test02Players methodsFor: 'testing'!test02_3ReceiveFromDeck	| tmp1 tmp2 |	tmp1 := MiniFluxxPlayer new: #Ana.	tmp2 := OrderedCollection		with: (TreasureCard new: #chocolate)		with: (TreasureCard new: #cookies)		with: (TreasureCard new: #tea).	tmp1 receive: 2 cardsFrom: tmp2.	self		assert: tmp1 handSize equals: 2;		assert: tmp2 first equals: (TreasureCard new: #tea)! !TestCase subclass: #Test03Games	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tests'!!Test03Games methodsFor: 'testing'!test03_8PlayWholeGameWithReverseDeck	| tmp1 tmp2 tmp3 tmp4 |	tmp1 := self testStrategy1.	tmp2 := self testStrategy2.	tmp3 := #(#Ana #Pedro #Marina #Juan).	tmp4 := MiniFluxxGame		withDeck: self testDeck reverse		playerNames: tmp3		cardsPerPlayer: 2.	tmp4		setStrategy: tmp1 forPlayer: #Ana;		setStrategy: tmp1 forPlayer: #Juan;		setStrategy: tmp2 forPlayer: #Marina;		playGame.	self		assert: tmp4 deckSize equals: 0;		assert: (tmp4 goal includes: (TreasureCard new: #cookies));		assert: tmp4 winner name equals: #Ana;		assert: tmp4 winner handSize equals: 1;		assert: (tmp4 players allSatisfy: [ :arg1 | arg1 table isNotEmpty ]);		assert: (tmp4 winner meets: tmp4 goal)! !!Test03Games methodsFor: 'testing'!test03_9GameEndsInADraw	| tmp1 tmp2 tmp4 |	tmp1 := #(#Ana #Pedro #Marina #Juan).	tmp4 := self testDeck.	tmp4 remove: (TreasureCard new: #milk).	tmp2 := MiniFluxxGame		withDeck: tmp4 yourself		playerNames: tmp1		cardsPerPlayer: 2.	self assert: tmp2 deckSize equals: 11.	tmp2 playGame.	self		assert: tmp2 deckSize equals: 0;		assert: (tmp2 goal includes: (TreasureCard new: #love));		assert: tmp2 winner isNil;		assert: (tmp2 players allSatisfy: [ :arg1 | arg1 table isNotEmpty ]);		assert: (tmp2 players allSatisfy: [ :arg2 | arg2 hasCards not ]);		assert: (tmp2 players allSatisfy: [ :arg3 | (arg3 meets: tmp2 goal) not ])! !!Test03Games methodsFor: 'testing'!test03_7PlayWholeGame	| tmp1 tmp2 tmp3 tmp4 |	tmp1 := self testStrategy1.	tmp2 := self testStrategy2.	tmp3 := #(#Ana #Pedro #Marina #Juan).	tmp4 := MiniFluxxGame		withDeck: self testDeck		playerNames: tmp3		cardsPerPlayer: 2.	tmp4		setStrategy: tmp1 forPlayer: #Ana;		setStrategy: tmp1 forPlayer: #Juan;		setStrategy: tmp2 forPlayer: #Marina;		playGame.	self		assert: tmp4 deckSize equals: 0;		assert: (tmp4 goal includes: (TreasureCard new: #milk));		assert: tmp4 winner name equals: #Juan;		assert: (tmp4 players allSatisfy: [ :arg1 | arg1 table isNotEmpty ]);		assert: (tmp4 players allSatisfy: [ :arg2 | arg2 handSize = 2 ]);		assert: ((tmp4 players detect: [ :arg3 | arg3 name = #Juan ]) meets: tmp4 goal)! !!Test03Games methodsFor: 'testing'!test03_2TooManyCards	| tmp1 tmp2 |	tmp1 := #(#Ana #Pedro #Marina #Juan).	tmp2 := MiniFluxxGame		withDeck: self testDeck		playerNames: tmp1		cardsPerPlayer: 10.	self		assert: tmp2 currentPlayer name equals: #Ana;		assert: tmp2 players size equals: 4;		assert: tmp2 currentPlayer handSize equals: 0;		assert: tmp2 deckSize equals: 20! !!Test03Games methodsFor: 'testing'!test03_1Initialization	| tmp1 tmp2 |	tmp1 := #(#Ana #Pedro #Marina #Juan).	tmp2 := MiniFluxxGame		withDeck: self testDeck		playerNames: tmp1		cardsPerPlayer: 2.	self		assert: tmp2 currentPlayer name equals: #Ana;		assert: tmp2 goal isNil;		assert: tmp2 winner isNil;		assert: tmp2 players size equals: 4;		assert: tmp2 currentPlayer handSize equals: 2;		assert: tmp2 deckSize equals: 12! !!Test03Games methodsFor: 'testing'!test03_3Pass	| tmp1 tmp2 |	tmp1 := #(#Ana #Pedro #Marina #Juan).	tmp2 := MiniFluxxGame		withDeck: self testDeck		playerNames: tmp1		cardsPerPlayer: 2.	self assert: tmp2 currentPlayer name equals: #Ana.	tmp2 pass.	self assert: tmp2 currentPlayer name equals: #Pedro.	tmp2 pass.	self assert: tmp2 currentPlayer name equals: #Marina.	tmp2 pass.	self assert: tmp2 currentPlayer name equals: #Juan.	tmp2 pass.	self assert: tmp2 currentPlayer name equals: #Ana! !!Test03Games methodsFor: 'testing'!test03_6Strategies	| tmp1 tmp2 tmp3 tmp4 |	tmp1 := self testStrategy1.	tmp2 := self testStrategy2.	tmp3 := #(#Ana #Pedro #Marina #Juan).	tmp4 := MiniFluxxGame		withDeck: self testDeck		playerNames: tmp3		cardsPerPlayer: 2.	tmp4 currentPlayer strategy: tmp1.	tmp4		setStrategy: tmp1 forPlayer: #Juan;		setStrategy: tmp2 forPlayer: #Marina.	4 timesRepeat: [ tmp4 play1Turn ].	self		assert: tmp4 deckSize equals: 8;		assert: (tmp4 goal includes: (TreasureCard new: #time));		assert: tmp4 currentPlayer name equals: #Ana;		assert: tmp4 currentPlayer table isEmpty;		assert:			(tmp4 players				allSatisfy: [ :arg1 | arg1 name = #Ana | arg1 table isNotEmpty ])! !!Test03Games methodsFor: 'testing'!test03_5SinglePlayerGame	| tmp1 tmp2 |	tmp1 := MiniFluxxGame		withDeck: self testDeck		playerNames: #(#Uno)		cardsPerPlayer: 3.	tmp2 := GoalCard		new: (Set with: (TreasureCard new: #rocket) with: (TreasureCard new: #moon)).	[ tmp1 winner ] whileNil: [ tmp1 play1Turn ].	self		assert: tmp1 deckSize equals: 7;		assert: tmp1 winner table size equals: 6;		assert: tmp1 winner handSize equals: 3;		assert: tmp1 goal equals: tmp2;		assert: tmp1 winner name equals: #Uno;		assert: tmp1 currentPlayer equals: tmp1 winner;		assert: (tmp1 currentPlayer meets: tmp2)! !!Test03Games methodsFor: 'testing'!test03_4Play1Turn	| tmp1 tmp2 |	tmp1 := #(#Ana #Pedro #Marina #Juan).	tmp2 := MiniFluxxGame		withDeck: self testDeck		playerNames: tmp1		cardsPerPlayer: 2.	self assert: tmp2 currentPlayer name equals: #Ana.	tmp2 play1Turn.	self		assert: tmp2 deckSize equals: 11;		assert: (tmp2 goal includes: (TreasureCard new: #time));		assert: tmp2 currentPlayer name equals: #Pedro! !!Test03Games methodsFor: 'for testing'!testStrategy2	^ self class testStrategy2! !!Test03Games methodsFor: 'for testing'!testStrategy1	^ self class testStrategy1! !!Test03Games methodsFor: 'for testing'!testDeck	^ self class testDeck! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Test03Games class	instanceVariableNames: ''!!Test03Games class methodsFor: 'for testing'!testStrategy2	^ [ :arg1 :arg2 :arg3 | 	| tmp1 |	tmp1 := arg3 goal.	arg1		detect: [ :arg4 | 			(arg4 isKindOf: GoalCard)				and: [ (arg2 union: arg1) includesAll: arg4 content ] ]		ifNone: [ tmp1				ifNil: [ arg1 first ]				ifNotNil: [ arg1 detect: [ :arg5 | tmp1 includes: arg5 ] ifNone: [ arg1 last ] ] ] ]! !!Test03Games class methodsFor: 'for testing'!testStrategy1	^ [ :arg1 :arg2 :arg3 | 	| tmp1 |	tmp1 := arg3 goal.	arg1		detect: [ :arg4 | (arg4 isKindOf: GoalCard) and: [ arg2 includesAll: arg4 content ] ]		ifNone: [ tmp1				ifNil: [ arg1 first ]				ifNotNil: [ arg1 detect: [ :arg5 | tmp1 includes: arg5 ] ifNone: [ arg1 last ] ] ] ]! !!Test03Games class methodsFor: 'for testing'!testDeck	| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 tmp8 tmp9 tmp10 tmp11 tmp12 tmp13 tmp14 tmp15 tmp16 tmp17 tmp18 tmp19 tmp20 tmp22 |	tmp1 := TreasureCard new: #chocolate.	tmp2 := TreasureCard new: #rocket.	tmp3 := TreasureCard new: #moon.	tmp4 := TreasureCard new: #cookies.	tmp5 := TreasureCard new: #money.	tmp6 := TreasureCard new: #love.	tmp7 := TreasureCard new: #peace.	tmp8 := TreasureCard new: #milk.	tmp9 := TreasureCard new: #tea.	tmp10 := TreasureCard new: #time.	tmp11 := TreasureCard new: #hammer.	tmp12 := GoalCard new: (Set with: tmp1 with: tmp4).	tmp13 := GoalCard new: (Set with: tmp2 with: tmp3).	tmp14 := GoalCard new: (Set with: tmp6 with: tmp7).	tmp15 := GoalCard new: (Set with: tmp8 with: tmp9).	tmp16 := GoalCard new: (Set with: tmp10 with: tmp5).	tmp17 := GoalCard new: (Set with: tmp4 with: tmp9).	tmp18 := GoalCard new: (Set with: tmp1 with: tmp8).	tmp19 := GoalCard new: (Set with: tmp10 with: tmp11).	tmp20 := GoalCard new: (Set with: tmp4 with: tmp8).	tmp22 := OrderedCollection new.	tmp22		add: tmp16;		add: tmp6;		add: tmp1;		add: tmp15;		add: tmp7;		add: tmp2;		add: tmp20;		add: tmp8;		add: tmp3;		add: tmp13;		add: tmp9;		add: tmp4;		add: tmp12;		add: tmp10;		add: tmp5;		add: tmp17;		add: tmp11;		add: tmp18;		add: tmp19;		add: tmp14.	^ tmp22 yourself! !