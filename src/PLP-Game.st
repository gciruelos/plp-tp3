Object subclass: #MiniFluxxGame	instanceVariableNames: 'players turn currentGoal winner deck'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Game'!!MiniFluxxGame methodsFor: 'as yet unclassified'!goal	^ currentGoal! !!MiniFluxxGame methodsFor: 'as yet unclassified'!players	^ players! !!MiniFluxxGame methodsFor: 'as yet unclassified'!pass	turn := turn + 1! !!MiniFluxxGame methodsFor: 'as yet unclassified'!setStrategy: arg1 forPlayer: arg2	(players atWrap: (players indexOf: arg2)) strategy: arg1! !!MiniFluxxGame methodsFor: 'as yet unclassified'!winner	^ winner! !!MiniFluxxGame methodsFor: 'as yet unclassified'!deckSize	^ deck size! !!MiniFluxxGame methodsFor: 'as yet unclassified'!currentPlayer	^ players atWrap: turn! !!MiniFluxxGame methodsFor: 'as yet unclassified'!init: arg1 with: arg2 with: arg3	| tmp1 |	players := arg2 collect: [ :arg4 | MiniFluxxPlayer new: arg4 ].	turn := 1.	winner := nil.	deck := arg1.	tmp1 := arg3 * players size <= arg1 size.	tmp1		ifTrue: [ arg3				timesRepeat: [ players do: [ :arg5 | arg5 receive: 1 cardsFrom: deck ] ] ]! !!MiniFluxxGame methodsFor: 'as yet unclassified' stamp: 'GonzaloCiruelos 6/22/2017 01:26'!playGame	[ self winner isNil and: [ self currentPlayer handSize > 0 or: self deckSize > 0 ] ]		whileTrue: [ self play1Turn ]! !!MiniFluxxGame methodsFor: 'as yet unclassified' stamp: 'GonzaloCiruelos 6/22/2017 01:09'!play1Turn	| tmp1 |	self currentPlayer		receive: (1 min: (deck size)) cardsFrom: deck;		play: self.	tmp1 := currentGoal isNil		ifTrue: [ false ]		ifFalse: [ currentGoal isMetBy: self currentPlayer table ].	tmp1		ifTrue: [ winner := self currentPlayer ]		ifFalse: [ self pass ]! !!MiniFluxxGame methodsFor: 'as yet unclassified'!setGoal: arg1	currentGoal := arg1! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MiniFluxxGame class	instanceVariableNames: ''!!MiniFluxxGame class methodsFor: 'as yet unclassified'!withDeck: arg1 playerNames: arg2 cardsPerPlayer: arg3	^ super new init: arg1 with: arg2 with: arg3! !