Object subclass: #MiniFluxxGame	instanceVariableNames: 'players turn currentGoal winner deck'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Game'!!MiniFluxxGame methodsFor: 'as yet unclassified' stamp: 'GT 6/18/2017 09:01'!currentPlayer	^players atWrap: turn.! !!MiniFluxxGame methodsFor: 'as yet unclassified' stamp: 'GT 6/18/2017 09:03'!deckSize	^deck size.! !!MiniFluxxGame methodsFor: 'as yet unclassified' stamp: 'GT 6/18/2017 09:01'!goal	^currentGoal.! !!MiniFluxxGame methodsFor: 'as yet unclassified' stamp: 'GT 6/18/2017 09:13'!init: aDeck with: somePlayers with: aNumber	| enoughCards |	players := somePlayers collect: [ :eachName | MiniFluxxPlayer new: eachName].	turn := 1.	winner := nil.	deck := aDeck.	enoughCards := (aNumber * players size) <= aDeck size.	enoughCards ifTrue: [players do: [ :each | each receive: aNumber cardsFrom: deck ]].	"podria ser necesario marcar un estado"	^self. ! !!MiniFluxxGame methodsFor: 'as yet unclassified' stamp: 'GT 6/18/2017 10:31'!pass	turn := turn + 1.                                                 ! !!MiniFluxxGame methodsFor: 'as yet unclassified' stamp: 'GT 6/18/2017 11:10'!play1Turn	self currentPlayer receive: 1 cardsFrom: deck.	self currentPlayer play: self.	self pass.! !!MiniFluxxGame methodsFor: 'as yet unclassified' stamp: 'GT 6/18/2017 09:02'!players	^players.! !!MiniFluxxGame methodsFor: 'as yet unclassified' stamp: 'GT 6/19/2017 09:55'!setGoal: aGoalCard	currentGoal := aGoalCard goal.! !!MiniFluxxGame methodsFor: 'as yet unclassified' stamp: 'GT 6/18/2017 09:02'!winner	^winner.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MiniFluxxGame class	instanceVariableNames: ''!!MiniFluxxGame class methodsFor: 'as yet unclassified' stamp: 'GT 6/18/2017 08:45'!withDeck: aDeck playerNames: somePlayers cardsPerPlayer: aNumber	^super new init: aDeck with: somePlayers with: aNumber.! !